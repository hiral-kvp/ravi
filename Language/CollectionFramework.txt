 Collection Framework - System.Collections.Generic namespace classes
 ====================================================================================

 Meaning of "collection" is a "group of objects". We've used array to create such  groups but arrays have limitations -- They don't support insertion or deletion of
 group item.

 In collection framework, we have suite of interfaces, classes and delegations to
 prepare dynamic lists or collections whose size can be grows or shrinks when
 items are added or removed.

 IEnumerable<T> -- collection interface
 -----------------------------------------
 

 To define a collection class or those collections classes exists in "Collection  Framework" are designed by implementing IEnumerable<T> interface.

 That means all collections are IEnumerable<T> including arrays.

 How to design our own collections?

 In C#, we have a special keywords "yield return" and "yield break" which prepares a  collection of specified datatype very easily.

 yield return statement insert your object/data into memory whereas yield break stops
 to insert the items/data/object into the collection.

 Syntax to create a method which returns collection
 ----------------------------------------------------

  access_modifier IEnumerable<YourType> MethodName([parameters....])
   {
     yield return value1;
     yield return value2;
     .....
    }
Example:
using System;
using System.Collections.Generic;

public class Test
{
  static IEnumerable<int> GetInts()
   {
     yield return 10;
     yield return 20;
     yield return 30;
    }
  static void Main()
   {
     foreach(var no in GetInts())
      {
        Console.WriteLine(no);
       }
    }
}

Example: Collection of odd and even numbers

class Test
{
    static IEnumerable<int> GetOdds(int []nos)
    {
        foreach (var n in nos)
        {
            if (n%2 == 1)
                yield return n;
        }
    }
    static IEnumerable<int> GetEvens(int[] nos)
    {
        foreach (var n in nos)
        {
            if (n % 2 == 0)
                yield return n;
        }
    }
    static void Main()
    {
        int[] nos = {2, 3, 44, 5, 77, 8, 1, 2, 55, 66};
        var odds = GetOdds(nos);
        var evens = GetEvens(nos);
        foreach (var no in odds)
        {
            Console.WriteLine(no);
        }
        foreach (var no in evens)
        {
            Console.WriteLine(no);
        }
    }
}

Example: Collection of "Product" objects and enumeration methods

public class Product
{
   public string Name {get;set;}
   public string Category {get;set;}
   public decimal Rate {get;set;}
   public int Qty {get;set;}
}

public class ProductRepository
{
   private Product []products;

   public ProductRepository()
    {
       products = new Product[]
        {
          new Product { Name="Hb6", Category="Pencil", Rate=5m, Qty = 6}, 
          new Product { Name="Hb1", Category="Pencil", Rate=5m, Qty = 0},
          new Product { Name="Rot", Category="Pen", Rate=15m, Qty = 60},
          new Product { Name="Ray", Category="Pen", Rate=12m, Qty = 6},
          new Product { Name="Book1", Category="Book", Rate=15m, Qty = 1},
          new Product { Name="Hb4", Category="Pencil", Rate=5m, Qty = 1}
         };
      }

    //Filter or Enumeration methods
    public IEnumerable<Product> GetProducts()
    {
        return products;
    }
    public IEnumerable<Product> SearchByName(string name)
    {
        foreach (var p in products)
        {
            if (p.Name.Contains(name)) //or p.Name.StartsWith(name)
                yield return p;        //or p.Name.EndsWith(name)
        }
    }
    public IEnumerable<Product> GetProductsByCategory(string category)
    {
        foreach (var p in products)
        {
            if (p.Category.Equals(category))
            {
                yield return p;
            }
        }
    }

    public IEnumerable<Product> GetUnavailable()
    {
        foreach (var p in products)
        {
            if (p.Qty == 0)
                yield return p;
        }
    }

    public IEnumerable<Product> GetReorderProducts()
    {
        foreach (var p in products)
        {
            if (p.Qty <=2)
                yield return p;
        }
    }

    public IEnumerable<Product> GetProductsBetween(decimal start, decimal end)
    {
        foreach (var p in products)
        {
            if (p.Rate>=start && p.Rate<=end)
                yield return p;
        }
    }
}

class Test
{
    
    static void Main()
    {
        ProductRepository repository = new ProductRepository();
        var pencils = repository.GetProductsByCategory("Pencil");
        foreach(var p in pencils) 
            Console.WriteLine(p);
        Console.WriteLine("---");
        foreach (var p in repository.GetUnavailable())
            Console.WriteLine(p);
        Console.WriteLine("---");
        foreach (var p in repository.GetReorderProducts())
            Console.WriteLine(p);
        Console.WriteLine("---");
        foreach (var p in repository.GetProductsBetween(10,70))
            Console.WriteLine(p);
        Console.WriteLine("---");
        foreach (var p in repository.SearchByName("h"))
            Console.WriteLine(p);
    }
}

Example: Create a delegate to pass conditions or predicates to the common method in a ProductRepository class.


public delegate bool ConditionDelegate<T>(T obj);
public class Product { ... }
public class ProductRepository 
{
   .....
   public IEnumerable<Product> GetProducts(ConditionDelegate<Product> condition)
    {
      foreach(var p in products)
        {
           if(condition(p)) yield return p;
         }
      }
}

And code in Main:

   //print unavailable products
   ConditionDelegate condition1 = (x)=>x.Qty == 0;
   foreach(var p in repository.GetProducts(condition1))
    {
        Console.WriteLine(p);
     }
  Console.WriteLine("-----");
  foreach(var p in repository.GetProducts( (x)=>x.Name.StartsWith("H")))
   {
     Console.WriteLine(p);
    }




