Authentication & Authorization - Login 
===========================================================================
Authentication means to check the user's username/email/password against the data store (database/file).

Authorization means to check whether the logged user has permissions to do a task or not.

We will use either Session or Cookie mechanism to create Authorization system; where the authenticated user or anonymous user (public or guest users) will be examined on each request whether she/he (or web-browser/client) is allowed to perform some programs or pages etc.

Example: Assume that we've two types of restrictions; for the manager (whose manages the site content or Administrator) and the clerks (perform day to day but assigned or limited tasks).

/webapp/
       |
       |------/manager/
                     in this folder we will place all pages which are used by the manager type of user.

       |------/clerk/
			This folder contains pages for "clerk" users
       |
       | and other pages/folders and programs
	 can be accessed anonymously (without need of user account).

Secondly, we use Session to create an authorization control or flag variable.

We will use "Response.Redirect()" method to transfer or request the resources programmatically.

    Response.Redirect("~/your.cshtml") will asks the browser to request the "your.cshtml". It is the instruction for the 											   browser.

Authorization flag must be examined in each request, so we will use different layouts for differnt users (or for the role - manager or clerk).

public class SessionWrapper
{
   public static string Role
    {
       get 
         {
            if(HttpContext.Current.Session["Role"] == null) return "";
            return HttpContext.Current.Session["Role"] as String;
          }
        set
          {
             HttpContext.Current.Session["Role"] = value;
           }
  }
  
  /* Role property is our Authorization flag */

  public static bool IsLogged
   {
      get
         {
           return !string.IsNullOrWhiteSpace(SessionWrapper.Role);
         }
    }

  /* Authorize method */
  public static void AuthorizeManager()
   {
      if(!"Manager".Equals(SessionWrapper.Role))
         HttpContext.Current.Response.Redirect("~/Login.cshtml");
   }
  public static void AuthorizeClerk()
   {
      if(!"Clerk".Equals(SessionWrapper.Role))
         HttpContext.Current.Response.Redirect("~/Login.cshtml");
   }
  /* You can use additional properites to store username or full name etc */
  public static string UserName 
   { 
     get 
       {
         if(HttpContext.Current.Session["UserName"] == null) return "";
              return HttpContext.Current.Session["UserName"] as string;
        }
      set
       {
        HttpContext.Current.Session["UserName"]=value;
       }
    }

        public static void Logout()
        {
            HttpContext.Current.Session.Abandon();
        }
}//End

We've two tables that represent user data:

create table Login
(
  UserId int primary key identity,
  UserEmail varchar(255) not null unique,
  UserPass varchar(MAX) not null,
  Created DateTime,
  Role varchar(15) not null
)
create table UserProfile
(
  UserId int primary key,
  FullName varchar(255) not null,
  Photo varchar(50),
  Foreign key (UserId) References Login(UserId)
)
Note: Add two or more records with "Manager" and "Clerk" roles.
 insert into login (useremail,userpass,created, role)
		values('admin@gmail.com','AMDam3OAyA80m0KUPuZnEoQaoLQ+uOyy2VjwWDOrY84MH7WlKFLY/LL/3vmT6qZxbg==','10-Jan-2017','Manager');

  At least we will have to create one user account (System or Admin); and depends upon that user account we can manage the other activities in our app.

Plain Password --- Never store plain passwords into the database
=================================================================
Always use "Hash Password" - A password that is hashed via industry standard cipher algorithms - DES (Digital Encryption System), Message Diagest, Secured Hash Algorithm (SHA) etc.  We will use "Crypto" class and its methods to obtain "HASH" password and compare the hash password. (And that is the reason to set MAX size of password field -- the hash can be vary for different algorithm.)


Example: To get/set hash of the plain password and verify it. (code in .cshtl)
<code>@System.Web.Helpers.Crypto.HashPassword("admin")</code>
<p>@Crypto.VerifyHashedPassword("AMDam3OAyA80m0KUPuZnEoQaoLQ+uOyy2VjwWDOrY84MH7WlKFLY/LL/3vmT6qZxbg==", "admin1")</p>
                                  ^
                                  | Copy+Paste the output generated by calling HashPassword("admin") method


Create the Layouts - for differnet users
-----------------------------------------
Add "_layouts" folder and add

/_layouts/
           _clerk.cshtml
           _manager.cshtml
           _public.cshtml

/_layouts/_clerk.cshtml
---------------------------
@{
    AuthApp.Models.SessionWrapper.AuthorizeClerk();
}
<!DOCTYPE html>
<html>
<head>
    <title>@Page.Title</title>
</head>
<body>
    <h2>Clerk Control Panel</h2>
    <nav>
        <a href="~/Clerk/Index.cshtml">Home</a>
        <a href="~/Clerk/Logout.cshtml">Logout</a>
    </nav>
    <div>
        @RenderBody()
    </div>
</body>
</html>
/_layouts/_manager.cshtml
-----------------------------
@{ 
    AuthApp.Models.SessionWrapper.AuthorizeManager();
}
<!DOCTYPE html>
<html>
<head>
    <title>@Page.Title</title>
</head>
<body>
    <h2>Manager Control Panel</h2>
    <nav>
        <a href="~/Manager/Index.cshtml">Home</a>
        <a href="~/Manager/Logout.cshtml">Logout</a>
    </nav>
    <div>
        @RenderBody()
    </div>
</body>
</html>

/Manager/Logout.cshtml and /Clerk/Logout.cshtml
------------------------------------------------
@{ 
    AuthApp.Models.SessionWrapper.Logout();
}
/Manager/Index.cshtml that uses _manager.cshtml layout
/Clerk/Index.cshtml that uses _clerk.cshtml layout 
  Add some more pages into Manager and Clerk folder.

/Login.cshtml (that uses _public.cshtml layout)
------------------
@{ 
    Page.Title = "Login";
    Layout = "~/_layouts/_public.cshtml";

    var UserEmail = Request["UserEmail"] ?? "";
    var UserPass = Request["UserPass"] ?? "";
    var cmd = Request["cmd"] ?? "";

    if("Login".Equals(cmd))
    {
        if(UserEmail.Equals("a@a.com") && UserPass.Equals("a"))
        {
            AuthApp.Models.SessionWrapper.Role = "Manager";
            Response.Redirect("~/Manager/Index.cshtml");
        }
        if (UserEmail.Equals("b@b.com") && UserPass.Equals("b"))
        {
            AuthApp.Models.SessionWrapper.Role = "Clerk";
            Response.Redirect("~/Clerk/Index.cshtml");
        }
    }
}
<h4>Login</h4>
<form method="post">
    <p>Username</p>
    <p><input type="email" name="UserEmail" /></p>
    <p>Password</p>
    <p><input type="password" name="UserPass" /></p>
    <p>
        <button name="cmd" value="Login">Login</button>
    </p>
</form>
    

